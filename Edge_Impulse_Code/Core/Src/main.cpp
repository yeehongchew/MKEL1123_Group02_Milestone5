#include "main.h"
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"
using namespace ei;
CRC_HandleTypeDef hcrc;
UART_HandleTypeDef huart2;
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CRC_Init(void);

//Fresh Orange
static float features0[] = {
		0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffffe, 0xfefefe, 0xfffefe, 0xfeffff, 0xfefefe, 0xfffdfc, 0xffffff, 0xffffff, 0xfeffff, 0xfeffff, 0xfefbfa, 0xfefbf8, 0xfefbf9, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xfefefd, 0xfefdfd, 0xfefefe, 0xffffff, 0xfefefe, 0xfffefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefefe, 0xfffefe, 0xffffff, 0xfefefe, 0xfffdfc, 0xffffff, 0xfeffff, 0xfef7f3, 0xfee0c0, 0xfdc891, 0xfdc079, 0xfebc71, 0xfdb96f, 0xfdba76, 0xfdc084, 0xfdd2aa, 0xfde5d1, 0xfef7f2, 0xfeffff, 0xffffff, 0xfffefe, 0xfefefd, 0xffffff, 0xfefefe, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefffe, 0xfffefe, 0xfefffe, 0xfeffff, 0xfefefd, 0xffffff, 0xfeffff, 0xfef8f3, 0xfed6af, 0xfdb264, 0xfea439, 0xfea027, 0xfe9e1d, 0xfe9d18, 0xfe9b15, 0xfe9f23, 0xfea335, 0xfda544, 0xfda84d, 0xfead60, 0xfec08d, 0xfde3d0, 0xfeffff, 0xffffff, 0xfefefd, 0xffffff, 0xfffefe, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xfeffff, 0xfffefe, 0xfffefd, 0xffffff, 0xfefcfa, 0xfdd7b4, 0xfeaf5f, 0xfea138, 0xfea532, 0xfea628, 0xfda219, 0xfd990b, 0xfd990c, 0xfd9c0e, 0xfea01b, 0xfe9f12, 0xfd9e15, 0xfea126, 0xfe9d30, 0xfe9a3b, 0xfd9e53, 0xfdbf97, 0xfdf5f1, 0xffffff, 0xfefefd, 0xfeffff, 0xfffefe, 0xfefefe, 0xffffff, 0xffffff, 0xfefefe, 0xfeffff, 0xfffefe, 0xfefefd, 0xfeffff, 0xfef0e6, 0xfdbb7f, 0xfea13d, 0xfea131, 0xfea32e, 0xfe9f19, 0xfea10e, 0xfe9e06, 0xfe9101, 0xff920e, 0xffa836, 0xfeac37, 0xfea516, 0xfea212, 0xfea011, 0xfe9c16, 0xfe9a23, 0xfe9735, 0xfe9442, 0xfbaf80, 0xfdf1eb, 0xffffff, 0xfefdfd, 0xffffff, 0xfefefe, 0xfefefe, 0xffffff, 0xfffefe, 0xfeffff, 0xfffefd, 0xfeffff, 0xfde6d4, 0xfeae68, 0xfe992c, 0xfe9c22, 0xfe9f24, 0xfea221, 0xfea621, 0xfeac29, 0xfda72d, 0xff8e0f, 0xed820d, 0xe4963f, 0xffa11a, 0xfea81b, 0xfda515, 0xfe9a07, 0xfe9405, 0xfe8d04, 0xfe8c17, 0xfe902d, 0xfc8a39, 0xfaac80, 0xfef8f5, 0xffffff, 0xfefefd, 0xffffff, 0xfefefe, 0xffffff, 0xffffff, 0xfefefd, 0xffffff, 0xfeede1, 0xfea758, 0xfe9412, 0xfd9408, 0xfd9610, 0xfe9a15, 0xfe9815, 0xfda015, 0xfea214, 0xfdab28, 0xffa830, 0xf19b2d, 0xe69935, 0xfea82c, 0xfead2b, 0xfea317, 0xfe970f, 0xfe8f0e, 0xfe8e12, 0xfe8b14, 0xfe8720, 0xfc872a, 0xfa8233, 0xf9b48a, 0xfefeff, 0xffffff, 0xfefefe, 0xffffff, 0xfffefe, 0xfefefe, 0xffffff, 0xfefcfa, 0xfeb572, 0xfe910d, 0xfe960a, 0xfd950d, 0xfd9714, 0xfe9816, 0xfe9413, 0xfe960c, 0xfe9d10, 0xfea417, 0xfdaa20, 0xffad27, 0xffab24, 0xfda621, 0xfea315, 0xfe9e12, 0xfe940b, 0xfe8c0a, 0xfe8b0e, 0xfe8d16, 0xfe8921, 0xfc8428, 0xf9812c, 0xf57f34, 0xf6c4a8, 0xffffff, 0xfefdfd, 0xfefefe, 0xfefefe, 0xfffdfc, 0xfeffff, 0xfed1ac, 0xfd8f0c, 0xfe9307, 0xfe950e, 0xfd9714, 0xfd9b1e, 0xfea335, 0xfeac47, 0xfea83d, 0xfe9f26, 0xfe9f12, 0xfe980b, 0xfd960c, 0xfd960f, 0xfe9a0c, 0xfe9508, 0xfe8f04, 0xfe8c04, 0xfe8703, 0xfe8303, 0xfd840e, 0xfd851d, 0xfb8026, 0xf87e2a, 0xf57e30, 0xf0864a, 0xfbe5d8, 0xffffff, 0xfefdfd, 0xffffff, 0xffffff, 0xfef8f4, 0xfda247, 0xfd8a00, 0xfe9107, 0xfe9209, 0xfe9819, 0xfea83d, 0xfeae4d, 0xfeb057, 0xfeb455, 0xfeb557, 0xfda738, 0xfd9417, 0xfd8c09, 0xfd8e0a, 0xfe9212, 0xfe8e09, 0xfe8602, 0xfe8704, 0xfe8404, 0xfe8003, 0xfd7d0d, 0xfc8016, 0xfa7d24, 0xf77c2e, 0xf27c30, 0xee7731, 0xf2a983, 0xfeffff, 0xfffefe, 0xfefefe, 0xffffff, 0xfdd6b5, 0xfd880c, 0xfd8b01, 0xfe9103, 0xfd9108, 0xfe991f, 0xfeaf4b, 0xfdb155, 0xfdb154, 0xfdb350, 0xfeb85a, 0xfeaf4f, 0xfe991e, 0xfe8a08, 0xfe8b08, 0xfe9110, 0xfe8b07, 0xfe8301, 0xfd8206, 0xfc7f06, 0xfd7e05, 0xfb790d, 0xf97814, 0xf6761c, 0xf47b29, 0xed782e, 0xeb762e, 0xea824a, 0xfbe6dc, 0xffffff, 0xfefdfd, 0xfeffff, 0xfeb77b, 0xfd8604, 0xfe8c04, 0xfe9103, 0xfe8f09, 0xfe9a1c, 0xfdab47, 0xfdae51, 0xfdb050, 0xfdb150, 0xfdb45c, 0xfeaa4e, 0xfe9422, 0xfe820a, 0xfe860d, 0xfe880a, 0xfd8202, 0xfe8002, 0xfb7a05, 0xf97807, 0xfa790c, 0xf57509, 0xf0710f, 0xef711a, 0xee7422, 0xec7730, 0xe77229, 0xe5722d, 0xf5c5ad, 0xffffff, 0xfefdfc, 0xfef4ed, 0xfea357, 0xfe8f13, 0xfe8d04, 0xfd9202, 0xfe9104, 0xfe9418, 0xfda137, 0xfea744, 0xfdad4f, 0xfdb761, 0xfeb057, 0xfe9a35, 0xfe8916, 0xfd8007, 0xfe850c, 0xfe8207, 0xfd7e01, 0xfa7602, 0xf77202, 0xf77504, 0xf37209, 0xf1710a, 0xed6e10, 0xe76a17, 0xe76e1e, 0xe77425, 0xe5722b, 0xe36c2a, 0xefac89, 0xffffff, 0xfefefd, 0xfee6d4, 0xfe9942, 0xfe901e, 0xfd8b09, 0xfd8e02, 0xfe9207, 0xfe9716, 0xfe9925, 0xfe9b28, 0xfda233, 0xfda440, 0xfd9b32, 0xfd8a17, 0xfe860b, 0xfd7f04, 0xfd7d04, 0xfd7c03, 0xfc7901, 0xf87302, 0xf37002, 0xee6c06, 0xee6e0f, 0xed6f08, 0xe96d11, 0xe16817, 0xe16a18, 0xde6b1b, 0xe2722b, 0xe37336, 0xed9b72, 0xfdfbfa, 0xffffff, 0xfedac2, 0xfd9745, 0xfd9325, 0xfd8703, 0xfd8502, 0xfe8a04, 0xfd8e0c, 0xfd8f14, 0xfe9221, 0xfe931c, 0xfd9620, 0xfe9421, 0xfd8e1a, 0xfd810e, 0xfd7d04, 0xfc7a03, 0xfb7902, 0xfa7702, 0xf17002, 0xec6f04, 0xe86a05, 0xe86b0a, 0xe56906, 0xe06a0b, 0xdb6812, 0xda6818, 0xd86a1d, 0xd96d25, 0xe37c41, 0xed9e77, 0xfdf9f7, 0xffffff, 0xfdd5bb, 0xfd9950, 0xfe952a, 0xfe8200, 0xfd8202, 0xfe8101, 0xfe8103, 0xfd8304, 0xfe8606, 0xfe860a, 0xfe911d, 0xfd8b14, 0xfc8408, 0xfc7d03, 0xfc7d02, 0xf97503, 0xf77201, 0xf26e01, 0xeb6c01, 0xe36801, 0xe16a03, 0xdf6a02, 0xdd6604, 0xd96506, 0xd5630c, 0xd56614, 0xd66818, 0xd86c29, 0xe5854f, 0xf0ac8f, 0xfdfdfd, 0xfefffe, 0xfcdac7, 0xfd9c5b, 0xfd963b, 0xfc8006, 0xfd8103, 0xfd8003, 0xfd7e02, 0xfc7c01, 0xfd7f02, 0xfe8701, 0xfd870a, 0xf97e07, 0xf97d03, 0xfa7a02, 0xf87502, 0xef6d02, 0xee6c02, 0xe86602, 0xe16201, 0xd86001, 0xd86303, 0xd96504, 0xd66203, 0xd26004, 0xce5f0a, 0xd56610, 0xd66718, 0xd9712f, 0xe68954, 0xf0b79d, 0xfeffff, 0xfdfcfc, 0xfbe8df, 0xfca470, 0xfe9142, 0xfc8012, 0xfa7d06, 0xfa7804, 0xfb7501, 0xfb7901, 0xfc7b02, 0xfe7f03, 0xfa7a01, 0xf87902, 0xf87702, 0xf26e01, 0xed6b02, 0xe76701, 0xe26402, 0xe06401, 0xda5e02, 0xd25a01, 0xd36003, 0xd25e02, 0xcf5d03, 0xd06106, 0xcc5c06, 0xd0610d, 0xd26117, 0xd57231, 0xe38b55, 0xf0cdbe, 0xfafdff, 0xfaf8f8, 0xfdf6f1, 0xfab187, 0xfd924c, 0xfa8221, 0xf87c0e, 0xf9790c, 0xf77201, 0xf97a02, 0xfb7b02, 0xf97702, 0xf97302, 0xf46f01, 0xf06e01, 0xe96a01, 0xe36502, 0xdd6302, 0xda5f01, 0xd85f01, 0xd45b02, 0xcf5601, 0xd05a03, 0xd15d07, 0xd15e04, 0xd36005, 0xd05e06, 0xd26112, 0xd3631b, 0xd57737, 0xe3996f, 0xefe0dd, 0xf3f4f6, 0xf5f4f4, 0xfeffff, 0xfbcaae, 0xf8934e, 0xf88733, 0xf77c13, 0xf67a11, 0xf67a08, 0xf97d02, 0xf87c01, 0xf57702, 0xf07001, 0xea6802, 0xea6902, 0xe06402, 0xdc5f02, 0xd75c02, 0xd65f01, 0xd35c01, 0xd05a01, 0xce5902, 0xcf5b04, 0xd05c07, 0xd05b05, 0xd35e08, 0xd2600b, 0xd46317, 0xd56b28, 0xd7793f, 0xe2ac91, 0xe7e5e8, 0xeae7e8, 0xefedee, 0xffffff, 0xfcece3, 0xf59c63, 0xf58636, 0xf47d1f, 0xf17a20, 0xf37a13, 0xf57f0e, 0xf57e0a, 0xf17503, 0xeb6e04, 0xe96b03, 0xe36702, 0xdc6201, 0xd75b02, 0xd15702, 0xd05a02, 0xd15f01, 0xd15c01, 0xce5904, 0xce5d09, 0xd05d07, 0xd25e09, 0xcf5d09, 0xd2610f, 0xd36925, 0xd56f31, 0xdc7d4b, 0xdcc2bb, 0xdedadc, 0xe1dbdb, 0xe7e4e4, 0xfefefd, 0xffffff, 0xf7c4a5, 0xf1853c, 0xef8135, 0xef7d28, 0xf17b1d, 0xf5811b, 0xf58218, 0xec7309, 0xe56c03, 0xe36b02, 0xdf6601, 0xd85e03, 0xd35c04, 0xd25b02, 0xd25c02, 0xd15d03, 0xd05c02, 0xd26009, 0xd1600a, 0xd15e0e, 0xd26012, 0xd25f11, 0xd56720, 0xd66e33, 0xda6e33, 0xd99c7b, 0xd7d0d3, 0xd8cdcd, 0xdad1d1, 0xddd9d8, 0xfefefe, 0xffffff, 0xfef6f3, 0xf1a06d, 0xeb833f, 0xec8035, 0xef7f26, 0xf58422, 0xf2811c, 0xea7413, 0xe06807, 0xe16809, 0xdc6308, 0xd66008, 0xd46007, 0xd26006, 0xd25f0c, 0xd3600c, 0xd36212, 0xd56414, 0xd56313, 0xd46216, 0xd4621a, 0xd56724, 0xd86b2e, 0xda6b30, 0xd57a49, 0xd7c3c0, 0xd5cbcd, 0xd3c8c9, 0xd4c9ca, 0xd5cfcf, 0xffffff, 0xfefdfd, 0xffffff, 0xf9dfcf, 0xee9056, 0xed813f, 0xef8031, 0xf2862e, 0xf38625, 0xed7c20, 0xe46f19, 0xe06a13, 0xda6310, 0xd66210, 0xd46416, 0xd56517, 0xd2610f, 0xd1600c, 0xd56413, 0xd76413, 0xd56518, 0xd7651f, 0xd76725, 0xd76a28, 0xd9692b, 0xd56833, 0xd2ac9d, 0xd6cccf, 0xd3c6c5, 0xd1c7c6, 0xd1c7c8, 0xd3cccc, 0xfefefe, 0xfefeff, 0xfefdfd, 0xffffff, 0xf8d7c2, 0xeb8d56, 0xeb813e, 0xf18b3e, 0xf18831, 0xec7f26, 0xe67422, 0xdf6c21, 0xda671a, 0xd76317, 0xd56419, 0xd8681c, 0xd4630f, 0xd26008, 0xd5630c, 0xd76619, 0xd76823, 0xd86927, 0xd76a28, 0xd56622, 0xd2662d, 0xd09f8e, 0xd3c8cc, 0xd1c3c2, 0xd0c5c4, 0xcec4c4, 0xd0c9c9, 0xd5cfcf, 0xfefefe, 0xfeffff, 0xfffefe, 0xfefdfd, 0xfeffff, 0xf4d6c3, 0xec9058, 0xed8741, 0xee8c47, 0xea8138, 0xe6752a, 0xe27127, 0xde6e26, 0xdc6c25, 0xdb6c23, 0xdd6d24, 0xd9681a, 0xd76617, 0xda6823, 0xd96a27, 0xda6b29, 0xd66927, 0xd26220, 0xcc693a, 0xcba092, 0xd1c4c7, 0xd0c0c1, 0xcdc1c1, 0xccc0c1, 0xcdc2c2, 0xd1c8c8, 0xd6cfcf, 0xfefefe, 0xfeffff, 0xfffefe, 0xfefdfe, 0xfefbfb, 0xfbfdff, 0xf1dccf, 0xe79c70, 0xea884e, 0xef874a, 0xec8344, 0xe97f3e, 0xe57938, 0xe07431, 0xde7030, 0xdd6d2d, 0xdd6c2c, 0xdd6c2b, 0xda6b2a, 0xd86429, 0xce612a, 0xbf663c, 0xbb7d65, 0xc1a4a1, 0xc8b8bb, 0xcbb7b7, 0xcbbcbc, 0xcabebf, 0xccc0c1, 0xcfc4c5, 0xd3cacb, 0xd7d2d3, 0xfffefe, 0xfefffe, 0xfefefe, 0xfffdfe, 0xfefcfd, 0xfbf9f9, 0xf6f6f7, 0xede2df, 0xe0b299, 0xe08d5e, 0xe48146, 0xe87d3c, 0xe77934, 0xe47530, 0xdf702c, 0xd7682a, 0xcf6128, 0xc55e2a, 0xb25d37, 0xa1624a, 0x9a7266, 0xa38988, 0xb3a1a4, 0xbeaaab, 0xc4aeae, 0xc7b4b5, 0xc8baba, 0xcdc2c2, 0xd1c7c7, 0xd5cccc, 0xd8d1d1, 0xded8da, 0xfefefe, 0xfffefe, 0xfeffff, 0xfefdfe, 0xfefcfd, 0xfcfbfc, 0xfaf6f4, 0xf4efed, 0xebe5e7, 0xddcbc7, 0xcfa899, 0xc48e73, 0xb77c5d, 0xaf7253, 0xa66c50, 0x9b6955, 0x936a5e, 0x8e6f68, 0x8e7876, 0x978485, 0xa69090, 0xb29a98, 0xbba5a3, 0xc1aeae, 0xc6b4b4, 0xcababb, 0xcec2c2, 0xd3c9c8, 0xd9d0cf, 0xdbd6d5, 0xe0dbdb, 0xe5e2e3, 0xfefefe, 0xffffff, 0xfefefe, 0xfefdfd, 0xfdfcfd, 0xfdfafb, 0xfbf8f8, 0xf8f4f3, 0xf4efee, 0xf1ebea, 0xe8e0e1, 0xd9cecf, 0xcbbdbd, 0xbdabac, 0xb4a1a0, 0xaf9c9a, 0xaf9b98, 0xb19d99, 0xb49f9a, 0xbca7a3, 0xc3aeac, 0xc5b2b2, 0xc8b7b7, 0xccbdbe, 0xcec1c1, 0xd4c7c7, 0xd8cecd, 0xdbd4d3, 0xe0dada, 0xe4e0e0, 0xe7e5e6, 0xeceaeb, 0xfefefe, 0xfffefe, 0xfeffff, 0xfefdfe, 0xfefcfd, 0xfdfbfc, 0xfcfafb, 0xfaf8f8, 0xfaf7f5, 0xf8f3f2, 0xf5eeec, 0xf1eae7, 0xece3e0, 0xe5dad8, 0xdfd2cf, 0xdaccc8, 0xd6c7c4, 0xd4c5c2, 0xd2c4c2, 0xd2c6c4, 0xd4c8c7, 0xd6cac9, 0xd7cccb, 0xd9cfce, 0xdcd2d3, 0xdfd7d7, 0xe2dbdb, 0xe6e0df, 0xe9e5e5, 0xece9ea, 0xefeded, 0xf2f0f1, 0xffffff, 0xfefefe, 0xffffff, 0xfefefe, 0xfefefe, 0xfefdfd, 0xfdfcfd, 0xfcfbfb, 0xfbfafa, 0xfaf8f8, 0xf9f6f7, 0xf8f4f4, 0xf6f1f0, 0xf3eeed, 0xefeae9, 0xece6e6, 0xe9e3e3, 0xe8e0e0, 0xe6dede, 0xe5dcdd, 0xe5dddd, 0xe5dede, 0xe5dfdf, 0xe6e1e0, 0xe8e2e2, 0xeae5e5, 0xece7e8, 0xeeebec, 0xf0eeef, 0xf2f0f1, 0xf5f3f4, 0xf7f6f6
};

//Stale Orange
static float features1[] = {
		0xfcfdff, 0xf9fbfe, 0xf9f9fe, 0xf5f7fd, 0xf4f5fe, 0xf3f4fc, 0xf1f3fb, 0xeff2f9, 0xeff2fa, 0xedf0f7, 0xf2f6ff, 0xe9e6ec, 0xdfd3c9, 0xecd3bb, 0xedc79b, 0xc9b389, 0xdcdac2, 0xf9f1ee, 0xf4eded, 0xf3f3f9, 0xf0f3fd, 0xf3f4fc, 0xf3f4fc, 0xf4f5fd, 0xf5f7fd, 0xf6f8fd, 0xf8f9fd, 0xfafafe, 0xfdfcff, 0xffffff, 0xffffff, 0xffffff, 0xfafbfe, 0xf8f9fe, 0xf6f6fe, 0xf2f5fc, 0xf1f4fb, 0xf0f3fb, 0xeef1fa, 0xedf0f9, 0xeaecf7, 0xf0f3fe, 0xdbd5d2, 0x9c806d, 0xb9a38f, 0xeee5de, 0xcbb381, 0x827843, 0x868258, 0xe7d9a0, 0xd9c19f, 0xe8e0d8, 0xf8f9fe, 0xf0f2f9, 0xf0f3fa, 0xf1f4fb, 0xf4f7fe, 0xf4f7fe, 0xf6f7fd, 0xf8f9fe, 0xfafbff, 0xfdfdfe, 0xfffffe, 0xffffff, 0xf8f9fe, 0xf5f6fd, 0xf2f4fc, 0xeff2fa, 0xedf1f9, 0xeceff9, 0xeceef8, 0xe9eaf5, 0xeff3ff, 0xd6d1d3, 0x8e7665, 0x887867, 0x8f8172, 0xab9784, 0xcac1b0, 0xc6cec0, 0xbcc4b7, 0xbdc9c1, 0xbac2bf, 0xd9d8ca, 0xf3f3ea, 0xf7f8fe, 0xeff2fb, 0xeff2fa, 0xf1f5fd, 0xf1f5fe, 0xf4f5fd, 0xf5f7fd, 0xf8f9fd, 0xfcfbfe, 0xfdfcfe, 0xffffff, 0xf4f6fd, 0xf2f4fc, 0xeff2f9, 0xedf0f8, 0xeceef8, 0xebedf8, 0xe7eaf4, 0xecf1fc, 0xd9d4d5, 0x917e70, 0x807065, 0x5e5444, 0x656358, 0xa3a196, 0xc2c1b2, 0xb7c1a7, 0xbfc8ac, 0xb4bca8, 0xb7bba9, 0xdbe2cf, 0xe2e7d8, 0xf2f2e9, 0xf7f8fb, 0xeff1fc, 0xf0f3fc, 0xf1f3fe, 0xf4f5fd, 0xf6f7fe, 0xf7f8fd, 0xfafafe, 0xfcfcff, 0xfefeff, 0xf2f4fd, 0xeff2fb, 0xeef0f9, 0xeceef8, 0xeaecf7, 0xe7eaf2, 0xeaeefa, 0xdad5d6, 0x8f7364, 0x7c675b, 0x635546, 0x4e473b, 0x8e8f85, 0xbcc2b8, 0xa8b29b, 0xa4b094, 0xacb6a1, 0xbac4a8, 0xa3ad92, 0xabb398, 0xd8e0c9, 0xe7ebdd, 0xf8f5f1, 0xfaf7f9, 0xf1f1fa, 0xf1f2fb, 0xf1f4fb, 0xf4f6fd, 0xf5f6fe, 0xf7fafe, 0xfafcfe, 0xfdfcff, 0xf0f2fb, 0xedf0f9, 0xeceef8, 0xe9ecf6, 0xe7e9f3, 0xe7edf8, 0xe9e8f0, 0x9c7f72, 0x7d6354, 0x6f594e, 0x6e675e, 0x807f77, 0x9a9890, 0xaeb3a6, 0xb9c1b2, 0xb4bead, 0xbec6b6, 0xb2bba3, 0xccd3c1, 0x9ca587, 0xc9cfb7, 0xe5e0cf, 0xeceee6, 0xfcf7ee, 0xf8f8f8, 0xf0f1fb, 0xf1f2fb, 0xf3f5fc, 0xf5f6fe, 0xf6f9fe, 0xf8fafe, 0xfbfbff, 0xeef0f9, 0xeceef8, 0xeaedf6, 0xe8e9f1, 0xe8ecf7, 0xe9e6ef, 0xa1816c, 0x795949, 0x775e52, 0x715f55, 0x8e8983, 0xa8aaa2, 0xb0b1a8, 0x9da398, 0xc0c7bc, 0xbbc2b6, 0xc1ccbd, 0xb8c0ad, 0xd3d9c7, 0xbdc5af, 0xc4cab6, 0xeae2d6, 0xefe6d6, 0xf9f8f2, 0xfefbf5, 0xf8f7fc, 0xf1f1fb, 0xf3f3fb, 0xf4f5fe, 0xf5f6fe, 0xf7f9fe, 0xfafbff, 0xeceffa, 0xeaedf8, 0xe8ebf3, 0xe7e9f4, 0xe8eaf6, 0xa37f65, 0x704425, 0x7b5948, 0x73584c, 0x77645b, 0x938b83, 0xaeaea7, 0xaaaea7, 0xafb1a7, 0xb7bbad, 0xb4baad, 0xcdd4c6, 0xb8c0ad, 0xc0c7b2, 0xcdd3c2, 0xc4c4ad, 0xdddecc, 0xe1dfcd, 0xefeee3, 0xfefcf7, 0xfefcfc, 0xf5f5fb, 0xf2f2fb, 0xf4f5fd, 0xf5f6fe, 0xf7f8fd, 0xfafbff, 0xeaedf8, 0xe8ebf6, 0xe6e9f1, 0xecf1ff, 0xb1917d, 0x6a390f, 0x775242, 0x6f4b3a, 0x745a4c, 0x8d7a70, 0xb8aba7, 0xbab9b4, 0xb2b0ab, 0xb0afa8, 0xc0c3b7, 0xc4c4b8, 0xdcdcd3, 0xd1d4ca, 0xb6beaa, 0xc7ceb9, 0xd5d5c2, 0xd3d1b8, 0xe5d8af, 0xeeecdb, 0xfbfaf7, 0xfffdfa, 0xfcfcfd, 0xf1f2fa, 0xf3f4fb, 0xf4f5fd, 0xf5f7fe, 0xf8f9fe, 0xe8ebf7, 0xe6e7f3, 0xeaeffb, 0xbda596, 0x703b11, 0x6d401b, 0x6c442b, 0x6c4739, 0x785b4f, 0x90756a, 0xb8a39c, 0xccc1bb, 0xc3b9b3, 0xbcb8b3, 0xc2c0b5, 0xd0cec4, 0xd6d4ca, 0xe0e1da, 0xd5dbd1, 0xbec4b3, 0xd8d9cb, 0xefdec5, 0xf8d29e, 0xf5ebd8, 0xfbf5f0, 0xfdf6f0, 0xfefcf6, 0xf4f6fd, 0xf2f3fb, 0xf4f5fe, 0xf5f6fe, 0xf7f8fe, 0xe7e8f4, 0xe8edfb, 0xd9d3d6, 0x75441f, 0x62350e, 0x6f421e, 0x684026, 0x653f32, 0x7e6059, 0x947770, 0xae928d, 0xcab4b1, 0xcab9b4, 0xc9bdb4, 0xcbc3bc, 0xc1b8b2, 0xccc7bf, 0xdcdcd4, 0xdaded3, 0xcfd0c2, 0xe0dfd5, 0xeae0d3, 0xf5decc, 0xf6ede4, 0xf9f2e8, 0xfdfaf6, 0xfefaf1, 0xf7f7f6, 0xf0f2fd, 0xf3f3fe, 0xf4f5fd, 0xf6f7fd, 0xe4e5f0, 0xebf1ff, 0xb19689, 0x5d2c06, 0x663918, 0x653915, 0x5b3316, 0x694134, 0x7e5c55, 0x97786e, 0xcbb7ae, 0xceb9b1, 0xdac9c3, 0xd1beb9, 0xded1cc, 0xd2c4be, 0xd0c6bf, 0xc5bfb6, 0xd9d4cb, 0xdcdcd4, 0xe2e4db, 0xe3dfd3, 0xf1ece6, 0xf8efe7, 0xf9f1e8, 0xfcf3ea, 0xfdf9f4, 0xf7f4f1, 0xf0f2fb, 0xf3f3fd, 0xf4f5fd, 0xf6f7fd, 0xe4e6f2, 0xe8ebf7, 0x89614b, 0x582c05, 0x673918, 0x5f3312, 0x552b0c, 0x653b23, 0x754e3f, 0x967168, 0xc6b0a6, 0xc9afa8, 0xdbc4bd, 0xd3beb8, 0xd4c3b9, 0xddccc3, 0xe6dcd6, 0xd6c5c0, 0xd6c8c7, 0xdad9d0, 0xe8e9e2, 0xebe8dd, 0xf3ebe4, 0xf8efe7, 0xfdf9f4, 0xf8deb4, 0xfbe9cd, 0xfaeddd, 0xf2f2f8, 0xf3f4fc, 0xf4f5fd, 0xf6f7fe, 0xe5e8f5, 0xe2e1e9, 0x7b5036, 0x5e2f0c, 0x67391a, 0x582d0e, 0x5b300f, 0x5b3010, 0x774730, 0xa57e72, 0xb08c84, 0xc6a89c, 0xe7d2c6, 0xc9aba4, 0xcfb8af, 0xe0c9bf, 0xe9dad4, 0xdcc8c1, 0xd1b7b0, 0xdecec1, 0xefebe4, 0xeee9df, 0xf3eee7, 0xf8ece3, 0xfdf5ed, 0xf9e8d1, 0xf8d8a2, 0xf7dca9, 0xf1f2f7, 0xf3f4fd, 0xf4f5fd, 0xf6f7fe, 0xe7ebf9, 0xd9d4d9, 0x734626, 0x633411, 0x653718, 0x582c0c, 0x5f3310, 0x603310, 0x663311, 0x8a5741, 0x9c6c5f, 0xbc978b, 0xe1c2af, 0xd8baae, 0xbf9e98, 0xe3cbc5, 0xdec0b4, 0xd6bbb0, 0xe4ccc6, 0xddc5bf, 0xf8efea, 0xf5e9e3, 0xf8ede6, 0xf9ede8, 0xfcf0e2, 0xf9e7d6, 0xf8d69c, 0xf7cd84, 0xf3edf0, 0xf2f5ff, 0xf4f5fc, 0xf6f7fe, 0xe6ecfb, 0xd6cdd2, 0x734222, 0x663513, 0x633312, 0x5d2f10, 0x5e3110, 0x643310, 0x6a3611, 0x6f3713, 0x875235, 0x9e6a58, 0xc99883, 0xdfbeb2, 0xc2a09b, 0xcfb0a9, 0xd7b2a4, 0xd8a997, 0xc69d92, 0xdab7af, 0xf7e4d9, 0xf9e7df, 0xfbece4, 0xfaebdc, 0xfae7ce, 0xf9e2c3, 0xf6ca75, 0xf8c86f, 0xf3e9e4, 0xf2f6ff, 0xf4f5fc, 0xf6f7fe, 0xe6ebf9, 0xd7cccf, 0x7c4a29, 0x64320f, 0x613012, 0x603010, 0x5f2f10, 0x6f3b15, 0x683512, 0x683311, 0x753e19, 0x8f5636, 0xb6795f, 0xdcb29e, 0xc6927d, 0xc4998e, 0xd5b3a9, 0xe1b6a4, 0xc59385, 0xddb1a4, 0xf4d4bf, 0xf8e0d0, 0xf9e1d3, 0xf6d4b2, 0xf7ce9b, 0xf7cd88, 0xf7ca67, 0xf7b74f, 0xf4dfca, 0xf3f7ff, 0xf4f4fb, 0xf6f7fe, 0xe6e9f6, 0xd7cdcf, 0x855330, 0x653415, 0x613112, 0x603010, 0x603111, 0x6b3713, 0x6a3713, 0x673211, 0x784018, 0x7e3d15, 0xa0582d, 0xc38151, 0xb96e36, 0xbd7e5a, 0xd59c7a, 0xc88c6f, 0xba7251, 0xe1aa92, 0xf5c5a5, 0xf6d7b1, 0xf5cc9f, 0xf3b775, 0xf4b966, 0xf4ba58, 0xf6bf57, 0xe9953a, 0xebc4a8, 0xf5fbff, 0xf5f5fb, 0xf7f8fe, 0xe3e4f1, 0xddd6da, 0x905f41, 0x6e3514, 0x673213, 0x612f0f, 0x562a0e, 0x5f2f11, 0x6a3713, 0x6c3713, 0x733a15, 0x824119, 0x9c5423, 0xb86d37, 0xb76833, 0xba682c, 0xd3843d, 0xc3753f, 0xc27139, 0xdc8a4e, 0xf1ad62, 0xf4c274, 0xf3b761, 0xf1a14a, 0xf1a547, 0xf4b04b, 0xeea34a, 0xc5702c, 0xdbb097, 0xf7fcff, 0xf4f5fa, 0xf7f9fd, 0xe0dee8, 0xe3e0e8, 0x9d7158, 0x733912, 0x6f3814, 0x673212, 0x602f10, 0x602e0e, 0x642f10, 0x703914, 0x783f16, 0x814318, 0x9b5222, 0xb56935, 0xb6693c, 0xb66227, 0xc97435, 0xca7437, 0xd07b35, 0xe8944a, 0xf3b15f, 0xf5be66, 0xf3b269, 0xf1a258, 0xf09e4b, 0xed9a44, 0xcc7b33, 0xae6030, 0xdbb7a5, 0xf7fdff, 0xf4f5f9, 0xf7f9fd, 0xdfdbe3, 0xe5e3ef, 0xb08c79, 0x753912, 0x743c17, 0x713814, 0x6d3412, 0x693111, 0x632d0e, 0x6e3713, 0x7b3f16, 0x914f25, 0x9d5225, 0xa25320, 0xba6f36, 0xb4632f, 0xbb672b, 0xcb7531, 0xd47a38, 0xeda462, 0xf3b870, 0xf4bd75, 0xf2ab5c, 0xf2a862, 0xeea058, 0xcd7832, 0xa75c25, 0xa55f3a, 0xe9d7d5, 0xf6f8ff, 0xf6f5f9, 0xf9f8fd, 0xe0dbe2, 0xe4e1eb, 0xcab7b2, 0x7c421a, 0x793f17, 0x783c15, 0x753a15, 0x723814, 0x6a3210, 0x6d3412, 0x7b3d15, 0x995021, 0xa25728, 0xa55829, 0xbc6832, 0xb05f25, 0xb15f27, 0xc06b2c, 0xd97f39, 0xefa55d, 0xf4b567, 0xf3b468, 0xf2ae6d, 0xf2a155, 0xd98337, 0xa95a23, 0x914417, 0xba886f, 0xf5f2f9, 0xf2eff5, 0xf5f4f9, 0xf9f7fc, 0xe1dae1, 0xded7df, 0xdfd8e0, 0x9a6a4c, 0x76390e, 0x7a3f17, 0x793d15, 0x783d15, 0x763b15, 0x723612, 0x7a3a14, 0x8c4417, 0x9f4f1f, 0xb4632d, 0xc26d33, 0xbb692b, 0xb35d22, 0xbc6427, 0xe08544, 0xef9a49, 0xf3af5f, 0xf1b571, 0xf3a95c, 0xe6913f, 0xb86425, 0x964b1a, 0x9a542d, 0xe4d0cf, 0xf2eef7, 0xf1ecf2, 0xf4f1f7, 0xf6f4fa, 0xded5d8, 0xd9d0d2, 0xdbd3d7, 0xc5ac9f, 0x7c3e18, 0x7a3e15, 0x7b3f15, 0x7a3e15, 0x793c15, 0x783c14, 0x803f16, 0x874118, 0x95471b, 0xaa5621, 0xbe652b, 0xc1662d, 0xbf652a, 0xca6d2d, 0xe58a4b, 0xef934c, 0xef9641, 0xf19f4a, 0xea903d, 0xce7229, 0xae5b23, 0x974917, 0xcea593, 0xf0ebf3, 0xece4eb, 0xf1eaf1, 0xf3eef5, 0xf5f1f8, 0xdad0d0, 0xd5cbca, 0xd1c4c1, 0xd2c7c5, 0xa87f66, 0x7c3c0f, 0x7f4219, 0x7c3e15, 0x7f4217, 0x7e4117, 0x824117, 0x8a4619, 0x92461a, 0xa8521f, 0xb55e23, 0xc06a28, 0xc06729, 0xd3792d, 0xe28434, 0xea8a3b, 0xef903f, 0xeb8531, 0xd7762c, 0xc26e2b, 0xa24f16, 0xba8365, 0xede1e5, 0xece1e6, 0xede4e9, 0xefe7ed, 0xf2ecf2, 0xf4eff5, 0xd9cecd, 0xd4c8c5, 0xcec1bd, 0xcbbcb8, 0xcbb8b3, 0x9d6e51, 0x824114, 0x834519, 0x844619, 0x854518, 0x8a4719, 0x8e4a1a, 0x954d1c, 0xa65420, 0xad5b22, 0xbd6c28, 0xc86b28, 0xd6782e, 0xdf8432, 0xe08130, 0xe78835, 0xdc8031, 0xc9722c, 0xad5818, 0xb97c58, 0xe9d8da, 0xebe0e5, 0xebe0e4, 0xede4e7, 0xf0e7eb, 0xf1eaee, 0xf4eff1, 0xdacecd, 0xd5c7c5, 0xcebfbb, 0xc9b8b3, 0xc7b3af, 0xc2aca5, 0xa07253, 0x864619, 0x894619, 0x8d4b1b, 0x8d4a1b, 0x934e1c, 0x98501e, 0xa25520, 0xaa5821, 0xb05d23, 0xc16928, 0xd5772d, 0xd97b2f, 0xd9792f, 0xd57a2e, 0xc76f25, 0xb15d1d, 0xbe8563, 0xe5d5d4, 0xe9d9dd, 0xe7d8db, 0xe9dde0, 0xecdfe3, 0xeee4e5, 0xefe7e8, 0xf2ebec, 0xdcd0cf, 0xd7c9c7, 0xd0c0bd, 0xc9bab4, 0xc7b1ab, 0xc3a9a5, 0xbea29a, 0xa77c67, 0x995f3c, 0x925021, 0x964f19, 0x99531c, 0x9c531e, 0xa1561f, 0xad5e23, 0xad5c22, 0xbc6626, 0xca712a, 0xcf7429, 0xc76c25, 0xbb6525, 0xb76d3c, 0xc89581, 0xdfc6c4, 0xdfcbcb, 0xe0cece, 0xe2d2d1, 0xe4d6d6, 0xe7dada, 0xe8dfdf, 0xebe2e2, 0xefe5e6, 0xded4d2, 0xd9ccc9, 0xd2c5c0, 0xccbdb7, 0xc9b4ae, 0xc2aaa0, 0xb8988f, 0xb29286, 0xaf8a7d, 0xa77b62, 0x9e6845, 0x9d5c32, 0x9f5725, 0xa35621, 0xa75a20, 0xac5c20, 0xb96725, 0xb76528, 0xb66a32, 0xb9774f, 0xbe8c79, 0xcca79f, 0xd4b5b3, 0xd4b5af, 0xd7bab7, 0xdcc6c2, 0xdecdc9, 0xe0d1cf, 0xe4d6d3, 0xe7dbd9, 0xeadedc, 0xede2e0, 0xe2d8d9, 0xded0d0, 0xd8cbc7, 0xd3c4bf, 0xcfb9b3, 0xc4aba3, 0xbc9d94, 0xb79588, 0xb39082, 0xb28e7e, 0xb18a7d, 0xad8575, 0xa9806c, 0xaa7a61, 0xaa735a, 0xae795f, 0xb38066, 0xb3846d, 0xb98f7d, 0xc39c92, 0xc7a499, 0xc9a79c, 0xccaba2, 0xd0afa9, 0xd5b3ad, 0xd8bcb5, 0xddc8c1, 0xe0d0cb, 0xe2d5d1, 0xe7dbd9, 0xeadedc, 0xede2e0, 0xe9e3e7, 0xe5dbe0, 0xe0d6d9, 0xdcd0d2, 0xd6c4c5, 0xcdb8b7, 0xc9b0af, 0xc6aaa7, 0xc1a49f, 0xc0a09c, 0xbe9e99, 0xbd9c98, 0xbd9c9a, 0xbd9d9a, 0xbe9e9b, 0xc09e9a, 0xc19e99, 0xc4a09a, 0xc7a39c, 0xc9a69d, 0xcba89f, 0xccaba1, 0xceaea3, 0xcfb1a7, 0xd4b4ac, 0xd7bbb2, 0xddc6bf, 0xe2d0cc, 0xe5d7d2, 0xe8ddda, 0xebe0de, 0xefe4e2, 0xf2eff4, 0xefe9ee, 0xebe4eb, 0xe6dfe4, 0xe2d5da, 0xdeced2, 0xdac9cd, 0xd7c4c8, 0xd5c0c3, 0xd3bcc1, 0xd1b9be, 0xcfb6ba, 0xceb4b7, 0xceb3b4, 0xcfb3b2, 0xd0b3b0, 0xd1b4b2, 0xd2b5b4, 0xd3b6b5, 0xd4b6b4, 0xd3b7b4, 0xd4b8b2, 0xd5b9b0, 0xd5bab3, 0xd7beb7, 0xdbc3bb, 0xe1cbc3, 0xe6d5d0, 0xe9dad9, 0xebdfdd, 0xefe4e2, 0xf2e6e4
};

//Fresh Apples
static float features2[] = {
		0x40404, 0x30303, 0x10101, 0x0, 0x0, 0x0, 0x60606, 0x313131, 0x696969, 0xadadad, 0xebebec, 0xffffff, 0xfffffe, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xffffff, 0x515151, 0x0, 0x30303, 0x0, 0x0, 0x0, 0x0, 0x242424, 0x5b5b5b, 0x9c9c9c, 0xd8d8d8, 0xfafafa, 0xffffff, 0xffffff, 0xc7c2b6, 0xe8e7e2, 0xffffff, 0xfdfdfd, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfbfbfb, 0xffffff, 0x959595, 0x0, 0x40404, 0x0, 0x494949, 0x898989, 0xcacaca, 0xf3f3f3, 0xffffff, 0xffffff, 0xffffff, 0xfefefe, 0xfbfbfb, 0xfeffff, 0x685b4f, 0xab9f95, 0xffffff, 0xfdfcfc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xffffff, 0xcccccc, 0x50505, 0x0, 0x10101, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfcfcfc, 0xfbfbfb, 0xfdfdfd, 0xfefefe, 0xfefefe, 0xffffff, 0xe7e4e3, 0x8e7168, 0xf1ebe9, 0xffffff, 0xfdfcfc, 0xfefdfd, 0xfffdfe, 0xfffefe, 0xfffefe, 0xfffefe, 0xfffefe, 0xfffefe, 0xfffefe, 0xfffefe, 0xffffff, 0xffffff, 0xfefefe, 0xffffff, 0xfcfcfc, 0x272727, 0x0, 0x20202, 0xfdfdfd, 0xfbfbfb, 0xfcfcfc, 0xfdfdfd, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xffffff, 0xc5aeae, 0xb58c8a, 0xffffff, 0xfdfdfd, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xfffefe, 0xffffff, 0xfdfdfd, 0xffffff, 0x666666, 0x0, 0x30303, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefdfd, 0xfefdfd, 0xffffff, 0xae8684, 0xe9d2ce, 0xf6dcd8, 0xefbdb7, 0xecaea6, 0xed9d96, 0xec9f95, 0xe9948c, 0xe99b95, 0xeeb9b3, 0xf3d6d2, 0xfbf4f1, 0xfffffe, 0xfffeff, 0xfffefe, 0xfbfbfb, 0xffffff, 0xa5a5a5, 0x0, 0x30303, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffffe, 0xfffefe, 0xffffff, 0xfefefd, 0xf4e2dc, 0xbc7c79, 0xaf4341, 0xe75c59, 0xe64a48, 0xe74442, 0xe44e4a, 0xe15f5c, 0xe98883, 0xeda198, 0xefb3a8, 0xeebbb1, 0xf3cbc4, 0xf9e3de, 0xfefaf8, 0xffffff, 0xfdfdfc, 0xffffff, 0xdcdcdc, 0xe0e0e, 0x0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xfffefe, 0xffffff, 0xf3dcd6, 0xe2978f, 0xd45b58, 0xc33f44, 0x9d2226, 0xdf6851, 0xf7936c, 0xec796a, 0xe98079, 0xef8480, 0xf19485, 0xf6c293, 0xfdea9c, 0xfdeca3, 0xf7c9a1, 0xf2aa9b, 0xf5bab0, 0xfbe9e3, 0xffffff, 0xfefefe, 0xffffff, 0x363636, 0x0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xffffff, 0xfdfcfa, 0xeccec6, 0xe3938b, 0xe5716e, 0xea655d, 0xef816c, 0xc5665a, 0xce6c5f, 0xde7e71, 0xd25a5b, 0xcf434a, 0xd93c46, 0xe84548, 0xef785a, 0xf5b976, 0xfae39b, 0xfef5ba, 0xf9d6ae, 0xf4b09f, 0xf1a096, 0xfae1da, 0xfcffff, 0xffffff, 0x7a7a7a, 0x0, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xffffff, 0xf8f0eb, 0xe8b6ab, 0xe9a9a0, 0xf4bdb3, 0xf5c0b3, 0xf1ae9c, 0xe69684, 0xd25f5d, 0xc73c47, 0xc33642, 0xc23a46, 0xc74452, 0xcf5766, 0xd65360, 0xe13c47, 0xeb504a, 0xf17e67, 0xf8d1b2, 0xfdf9d7, 0xfae0c5, 0xf4b7aa, 0xf1a093, 0xf9e9e4, 0xffffff, 0xb3b2b2, 0x0, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xffffff, 0xf6e8e3, 0xe4a89d, 0xe99b90, 0xf3ada4, 0xf1988b, 0xe77b73, 0xd3565a, 0xc63a43, 0xbf303b, 0xc74252, 0xc75a68, 0xd47b83, 0xe8b1b4, 0xebbbbe, 0xd8818a, 0xbb313b, 0xca2c2b, 0xdd3433, 0xec6864, 0xf7bfb0, 0xf8d8c4, 0xf7caba, 0xf2a696, 0xf3b3a8, 0xffffff, 0xebebeb, 0x141414, 0xffffff, 0xffffff, 0xfffefe, 0xffffff, 0xf9f0ec, 0xe2a499, 0xdb746b, 0xdf6866, 0xec6863, 0xe84e4a, 0xd1383e, 0xc8343e, 0xc43741, 0xc54d5b, 0xe8b6bd, 0xf2dada, 0xf3d6d1, 0xf8e0da, 0xe5b1b1, 0xcc5f65, 0xa6252d, 0xa0211a, 0xac241c, 0xc52d2c, 0xe25a5a, 0xf2998f, 0xf2a797, 0xf2a392, 0xf19683, 0xfbe8e3, 0xffffff, 0x454444, 0xffffff, 0xffffff, 0xffffff, 0xfefffd, 0xe9bcb2, 0xda7b73, 0xd65d5a, 0xdd5256, 0xec6859, 0xe65a4f, 0xcb333f, 0xc73943, 0xc23643, 0xd1707a, 0xf3d5d2, 0xecc8c4, 0xe09fa0, 0xd47c81, 0xbe4e5a, 0xac2b3a, 0x9a1f23, 0x8c1b16, 0x992119, 0xa1231b, 0xc22f31, 0xdf4f53, 0xeb6c64, 0xf07b6d, 0xee856d, 0xf4c8b8, 0xffffff, 0x878685, 0xffffff, 0xfefefe, 0xffffff, 0xf4e5df, 0xde9a8f, 0xd86f6b, 0xdc6b69, 0xd9575a, 0xe65552, 0xe34d4b, 0xc4343d, 0xbf3440, 0xb93140, 0xbd424e, 0xc5545d, 0xb94a55, 0xaf3441, 0xac2832, 0xa42a35, 0x9b242a, 0x8d1b18, 0x891b15, 0x8a1b16, 0x8d1c18, 0xa02322, 0xc1353a, 0xd54246, 0xe44e4e, 0xed695a, 0xf1a490, 0xffffff, 0xcccccc, 0xffffff, 0xfffefe, 0xffffff, 0xe9c8c0, 0xdc8b83, 0xcf6464, 0xcc5d5f, 0xc74a50, 0xde4b4f, 0xe54848, 0xbb2d32, 0xae292f, 0xa82428, 0xa72327, 0xa8232b, 0xa4232a, 0x941d1f, 0x97211e, 0x93211e, 0x871b15, 0x811912, 0x7f1710, 0x851b14, 0x8a1c16, 0x8b1b16, 0xa92d31, 0xbc373d, 0xcf3e43, 0xe85954, 0xf2998b, 0xfef7f5, 0xffffff, 0xffffff, 0xffffff, 0xfdfcfb, 0xe4bbb0, 0xd9827c, 0xc85257, 0xc74e52, 0xbd4348, 0xcc4045, 0xe3403f, 0xb62825, 0x9c1f1c, 0x9f201b, 0xa2221d, 0xa0221e, 0x9d241e, 0x8c1b16, 0x871a15, 0x861a13, 0x7e1711, 0x7b1710, 0x7f1810, 0x7e1711, 0x811812, 0x8d1c1a, 0xa32d33, 0xab373d, 0xc64549, 0xdb5655, 0xed867a, 0xfce9e5, 0xffffff, 0xfefefe, 0xffffff, 0xfcfaf8, 0xe2b4a9, 0xcf726e, 0xbf4147, 0xbf4246, 0xb73e42, 0xbc363d, 0xd33636, 0xbb2b22, 0x9d2119, 0x941d16, 0x991e18, 0x951f16, 0x8d1b14, 0x881a13, 0x801711, 0x7c1812, 0x79160f, 0x74130d, 0x7a160f, 0x791610, 0x861a17, 0x9b2528, 0xa33138, 0xa83b3f, 0xbb474a, 0xcf5456, 0xe16e67, 0xf8dcd7, 0xffffff, 0xfffffe, 0xffffff, 0xfdfdfc, 0xdba59b, 0xba4e4e, 0xb53b3d, 0xb93a40, 0xb3353b, 0xb63237, 0xc83130, 0xbe2820, 0x9b1f16, 0x891b12, 0x8c1c14, 0x8c1b14, 0x871a12, 0x801811, 0x7e1811, 0x781610, 0x7a1711, 0x861d15, 0x7c1813, 0x7d1718, 0x902027, 0x9c2a32, 0xa5343a, 0xac4042, 0xb5484a, 0xc75254, 0xdc726d, 0xf7e0db, 0xffffff, 0xebebeb, 0xffffff, 0xffffff, 0xd7a098, 0xb74245, 0xb2383b, 0xb1363b, 0xae3236, 0xb32e33, 0xc12e2f, 0xbf2c24, 0xa22218, 0x8d1b13, 0x851912, 0x821810, 0x891c14, 0x821b13, 0x7d1911, 0x7c1711, 0x811a15, 0x871c19, 0x8c1f1f, 0x902329, 0x94282f, 0xa43138, 0xa9373d, 0xa53c42, 0xb5474c, 0xc75154, 0xd97571, 0xf9eae6, 0xffffff, 0xb1b1b1, 0xffffff, 0xffffff, 0xdcb0a8, 0xb94543, 0xb6393c, 0xb33437, 0xad2d32, 0xad2c31, 0xb22a2c, 0xb32927, 0xa0211a, 0x921c16, 0x871a15, 0x861b13, 0x831912, 0x7d1912, 0x831a18, 0x82191a, 0x831b20, 0x8a1f25, 0x93242a, 0x99282e, 0x9c2e33, 0xa33239, 0xa6373d, 0xac3e44, 0xbd494d, 0xcb5658, 0xd9807b, 0xfcf6f3, 0xffffff, 0x777777, 0xffffff, 0xffffff, 0xead0ca, 0xb8514d, 0xb53a3e, 0xb73539, 0xb43235, 0xac2d31, 0xb12d2e, 0xb52b2c, 0xa52422, 0x981f19, 0x8f1d18, 0x8d1e1c, 0x902025, 0x8b1d20, 0x942124, 0x8e2127, 0x99282d, 0x9a282f, 0x9c2830, 0xa02d32, 0xa23036, 0xa7353a, 0xac3b40, 0xb34045, 0xc04c4e, 0xcc5859, 0xe29a94, 0xffffff, 0xffffff, 0x343434, 0xffffff, 0xffffff, 0xf9f4f0, 0xc4766d, 0xb43e3f, 0xbc3c3f, 0xb03439, 0xaf3337, 0xb63235, 0xb93034, 0xb22f30, 0xa02628, 0x9b2224, 0x952227, 0x922126, 0x912229, 0x99262d, 0x95282d, 0x9a2930, 0x9f2e34, 0xa53134, 0xa73335, 0xad3539, 0xac373d, 0xb13c42, 0xbc4649, 0xc75153, 0xd05f5e, 0xeab8b2, 0xffffff, 0xfefdfd, 0xd0d0d, 0xdcdcdc, 0xffffff, 0xffffff, 0xdeb4aa, 0xbe504b, 0xbe4244, 0xb63e41, 0xb4383c, 0xba393a, 0xbf3a38, 0xb93336, 0xb22f33, 0xa72b30, 0xa22a2e, 0xa32a2e, 0x9d2a31, 0x9a2930, 0x9c2b2f, 0x9a2b31, 0x9f2d33, 0xa53035, 0xa63136, 0xac3438, 0xb3393e, 0xb63c42, 0xbd454b, 0xca5256, 0xd66d69, 0xf4d8d5, 0xffffff, 0xfffdfd, 0x0, 0xa4a4a4, 0xffffff, 0xfcfeff, 0xf8eeea, 0xca7770, 0xbd4847, 0xbe4545, 0xb83c40, 0xb6393c, 0xbb393b, 0xc1383b, 0xbb3537, 0xb32f33, 0xb33034, 0xad3035, 0xa62e35, 0xa42e35, 0xa32e34, 0xa02e33, 0xa42e34, 0xa63036, 0xa73139, 0xa93137, 0xb5393d, 0xbd4044, 0xc54a4f, 0xd25758, 0xe0837e, 0xfcf5f3, 0xffffff, 0xfffefe, 0x0, 0x666666, 0xffffff, 0xfcfbfb, 0xffffff, 0xe6c4bc, 0xc25852, 0xc24a49, 0xbe4445, 0xbd3e3f, 0xc03e3e, 0xc33c3f, 0xc53d3d, 0xc1373a, 0xb83235, 0xb33137, 0xaf2f33, 0xa62d33, 0xa82f36, 0xa62e35, 0xac3237, 0xad3138, 0xae3239, 0xb2343a, 0xb4383d, 0xbf4045, 0xc74b50, 0xd55b5c, 0xe7a6a2, 0xffffff, 0xfefdfe, 0xffffff, 0x0, 0x272727, 0xfbfbfb, 0xffffff, 0xfffefe, 0xfefffe, 0xd79c96, 0xc14f4d, 0xc64c4d, 0xc64646, 0xc34141, 0xc54041, 0xc53e41, 0xc73f40, 0xc0363a, 0xb83136, 0xb73437, 0xb6353a, 0xb3363a, 0xaf3338, 0xb43239, 0xb7353b, 0xb3333a, 0xb4333b, 0xbb3b40, 0xc64247, 0xd55255, 0xdf6864, 0xf6dcd8, 0xffffff, 0xfffdfd, 0xffffff, 0x0, 0x50505, 0xcbcbcb, 0xffffff, 0xfcfcfc, 0xffffff, 0xfaf6f3, 0xd38e87, 0xc24f4e, 0xc64c4c, 0xc54446, 0xc54142, 0xbc3c3f, 0xbd3e42, 0xc53d40, 0xc0363a, 0xc0393b, 0xbb363d, 0xb2343a, 0xb33439, 0xb53338, 0xbc373c, 0xb9353b, 0xb7343a, 0xc54044, 0xd04a4f, 0xd84e4e, 0xe99c95, 0xffffff, 0xfffefe, 0xffffff, 0xffffff, 0x40404, 0x0, 0x949494, 0xffffff, 0xfbfbfb, 0xfefefe, 0xffffff, 0xf9f2ef, 0xd5928b, 0xc35250, 0xc04649, 0xc34046, 0xc03d41, 0xbe3c40, 0xc43f41, 0xbf383d, 0xbf383d, 0xbb363c, 0xb5343c, 0xba353b, 0xb9333a, 0xc4393f, 0xbf373d, 0xc33b40, 0xd04449, 0xd54244, 0xdd7774, 0xfbf1ef, 0xfeffff, 0xfcfcfc, 0xfbfbfb, 0xfdfdfd, 0x30303, 0x0, 0x515151, 0xffffff, 0xfdfdfd, 0xffffff, 0xfefefe, 0xffffff, 0xfbf6f3, 0xdb9e99, 0xc85555, 0xc8474a, 0xc13e42, 0xc13b3f, 0xc53c41, 0xc23c41, 0xbe353d, 0xbd373c, 0xb63239, 0xbf363a, 0xc6383d, 0xcf3c42, 0xc7363d, 0xc52e34, 0xba2c30, 0xc36765, 0xf2e5e1, 0xfeffff, 0xfefdfd, 0xffffff, 0xffffff, 0xfefefe, 0x20202, 0x0, 0x1b1b1b, 0xf2f2f2, 0xffffff, 0xfefefe, 0xffffff, 0xfefefe, 0xffffff, 0xfdfcfa, 0xe3ada9, 0xcd5857, 0xc64242, 0xc53f42, 0xc53e41, 0xc43b3f, 0xc83b3f, 0xc8383d, 0xc23137, 0xc63335, 0xb9282b, 0xa11b1e, 0x952220, 0x9a4745, 0xc19e9e, 0xf7f5f4, 0xffffff, 0xffffff, 0xf1f1f1, 0xc5c5c5, 0x838383, 0x454545, 0x10101, 0x10101, 0x0, 0xbcbcbc, 0xffffff, 0xfcfcfc, 0xffffff, 0xffffff, 0xfefefe, 0xfefefe, 0xffffff, 0xeecbc6, 0xd57671, 0xc54342, 0xbf2e31, 0xb9272a, 0xaf2224, 0xa51e1d, 0x9e201d, 0x8a2825, 0x854a49, 0xa88887, 0xd9cecc, 0xfefefd, 0xfcfdfe, 0xd7d8d8, 0x959595, 0x565656, 0x202020, 0x0, 0x0, 0x0, 0x0, 0x40404, 0x0, 0x838383, 0xffffff, 0xfcfcfc, 0xffffff, 0xffffff, 0xffffff, 0xfffefe, 0xfefdfd, 0xffffff, 0xfdfbfa, 0xe9c5c2, 0xc48985, 0xa9736f, 0xa37774, 0xb0908c, 0xc5b3b0, 0xe9e6e5, 0xf8fcfb, 0xe5e9e9, 0xb0b2b2, 0x676666, 0x2b2a2a, 0x20303, 0x0, 0x0, 0x0, 0x10101, 0x30303, 0x30303
};

//Stale Apples
static float features3[] ={
		0x0, 0x0, 0x20202, 0x30303, 0x30303, 0x10101, 0x0, 0x0, 0x0, 0x90909, 0x313131, 0x727272, 0xb0afaf, 0xe8e7e6, 0xffffff, 0xffffff, 0xfffeff, 0xfffeff, 0xfffeff, 0xffffff, 0xffffff, 0xfffffe, 0xfffffe, 0xffffff, 0xffffff, 0xffffff, 0xfcfcfc, 0xffffff, 0x838383, 0x0, 0x30303, 0x0, 0x30303, 0x20202, 0x0, 0x0, 0x0, 0x50505, 0x262626, 0x606060, 0xa3a3a2, 0xd9d9d8, 0xfdfdfd, 0xffffff, 0xffffff, 0xffffff, 0xfffffd, 0xfef9f0, 0xfffde6, 0xffffdf, 0xffffe4, 0xfffff1, 0xfffffb, 0xffffff, 0xffffff, 0xfffffe, 0xfffefe, 0xffffff, 0xfcfcfc, 0xffffff, 0xc5c5c5, 0x0, 0x10101, 0x0, 0x0, 0x0, 0x1b1b1b, 0x4e4e4e, 0x919191, 0xcccccc, 0xf7f6f6, 0xffffff, 0xfefefe, 0xffffff, 0xfeffff, 0xfbfdfc, 0xf9e8e4, 0xf6cabe, 0xf3a889, 0xf7c681, 0xfce58d, 0xfbe498, 0xfceb9c, 0xfef8a0, 0xfffeb6, 0xfffdd1, 0xfffee8, 0xfffffe, 0xffffff, 0xfffefe, 0xfefefe, 0xffffff, 0xf0f0f0, 0x222222, 0x0, 0x20202, 0x7b7b7b, 0xc0c0c0, 0xeeeeee, 0xffffff, 0xfefefe, 0xffffff, 0xfeffff, 0xfdffff, 0xfbf8f8, 0xf7e6df, 0xfbdfc5, 0xfacc9b, 0xef8c6b, 0xec684f, 0xf08653, 0xf4b677, 0xf29d80, 0xf2b07b, 0xf5c86e, 0xfce982, 0xfefd8e, 0xfffe96, 0xfffeae, 0xfcf3b8, 0xfdf8e0, 0xffffff, 0xfefefe, 0xfcfcfc, 0xffffff, 0x545454, 0x0, 0x30303, 0xffffff, 0xffffff, 0xffffff, 0xfdfdfd, 0xfcfbfb, 0xfdfdfd, 0xfefefe, 0xf9ddd5, 0xf8b692, 0xe0af81, 0xb69a69, 0xdf9f5a, 0xf5894e, 0xef864d, 0xf4ae69, 0xf2a57f, 0xf6bb7e, 0xfbe47e, 0xfbe17f, 0xf8d378, 0xf7d780, 0xfae582, 0xf3dc84, 0xe8d08f, 0xe3ca8b, 0xf1e5cb, 0xffffff, 0xfcfbfa, 0xffffff, 0x999999, 0x0, 0x30303, 0xfcfcfc, 0xfcfcfc, 0xfefefe, 0xfffdfd, 0xffffff, 0xfdf0ef, 0xf4b5a9, 0xf0956d, 0xf2a55a, 0xf5bd6a, 0xc99e5e, 0xb1944d, 0xefb055, 0xf5b25c, 0xf6c67a, 0xfada87, 0xfcef83, 0xfce472, 0xf8d365, 0xe5b35b, 0xd5a468, 0xd0aa72, 0xc49c64, 0xc3a076, 0xcfb684, 0xcdb486, 0xf5eee1, 0xfeffff, 0xffffff, 0xcfcfcf, 0x30303, 0x0, 0xffffff, 0xffffff, 0xfffefe, 0xffffff, 0xfbe9e7, 0xf3a899, 0xf29c75, 0xf5bc79, 0xf9d578, 0xfad370, 0xf6c475, 0xd79460, 0xe7b474, 0xfee88f, 0xfef489, 0xfdf382, 0xfce674, 0xf5cd5e, 0xdeac58, 0xc19056, 0xbea080, 0xae9681, 0xa58d77, 0x997e68, 0xb79d7c, 0xc1a883, 0xd4bb97, 0xfffdf8, 0xffffff, 0xfcfcfc, 0x2b2b2b, 0x0, 0xffffff, 0xfffefe, 0xffffff, 0xfaeceb, 0xf1a39d, 0xf2a588, 0xf7c688, 0xfbe68d, 0xfded90, 0xf1bf84, 0xda735a, 0xe7604a, 0xf9c972, 0xfeff87, 0xfced7b, 0xfce271, 0xebc063, 0xcb944d, 0xaf8153, 0x967255, 0x836550, 0x938377, 0x867464, 0x928577, 0x7f7164, 0xa19382, 0xb09173, 0xdfcfbc, 0xffffff, 0xffffff, 0x666666, 0x0, 0xffffff, 0xffffff, 0xfffefe, 0xf3b9b7, 0xf2a48e, 0xf7c77c, 0xfded75, 0xfffc81, 0xf5bb85, 0xd85653, 0xd84635, 0xec5e38, 0xee7d47, 0xf5b261, 0xf4b75f, 0xe4a756, 0xbb814e, 0x976d50, 0x86674f, 0x786352, 0x53443a, 0x604f44, 0x74655a, 0x73675a, 0x68645c, 0x695f56, 0x9e816b, 0xcaaf91, 0xfffffe, 0xffffff, 0xa9a9a9, 0x0, 0xfffefe, 0xffffff, 0xfae3e4, 0xf1a79c, 0xf6bb78, 0xfdf179, 0xffff80, 0xfbe575, 0xee815d, 0xdf4b3f, 0xe3503a, 0xe75138, 0xe6583c, 0xe57149, 0xcf7148, 0xab6847, 0x835440, 0x6d5649, 0x77685f, 0x5c5048, 0x403b36, 0x433a34, 0x514a44, 0x57544f, 0x444543, 0x5a544f, 0x93755f, 0xb99a78, 0xf5efe6, 0xffffff, 0xdddcdc, 0xe0e0e, 0xfffefe, 0xffffff, 0xf5c9c9, 0xf3af83, 0xfadd74, 0xfffb78, 0xfef57b, 0xf9d472, 0xee8367, 0xec6a5c, 0xe95847, 0xe55242, 0xe55e4a, 0xd5684d, 0xb36247, 0x794939, 0x554138, 0x574a42, 0x63524a, 0x655a52, 0x3e3d39, 0x201f1f, 0x3a3836, 0x5f5f5b, 0x3e3f3e, 0x5a5753, 0x80726a, 0x866a56, 0xe0d6cc, 0xffffff, 0xffffff, 0x363636, 0xffffff, 0xfefafc, 0xf5bfb2, 0xf5b975, 0xf9d672, 0xfef978, 0xfce97b, 0xf8d386, 0xee7a5f, 0xec6b5d, 0xed7568, 0xed745f, 0xef8361, 0xcf6b54, 0x954c3c, 0x5c352c, 0x42312b, 0x523e35, 0x675248, 0x6c625a, 0x43423f, 0x1f1f20, 0x3e3e3e, 0x575956, 0x262827, 0x343636, 0x655a52, 0x7b5d4b, 0xbeab9e, 0xffffff, 0xffffff, 0x7a7a7a, 0xffffff, 0xfdf4f5, 0xf3aa8c, 0xf3aa6d, 0xf9d474, 0xfef782, 0xfbe279, 0xf5b96d, 0xed6e55, 0xef7e72, 0xf0857b, 0xef7e6b, 0xee8a66, 0xc7715d, 0x87483b, 0x63473c, 0x523e34, 0x4f3a32, 0x594136, 0x6e6860, 0x535758, 0x1c1c1d, 0x262727, 0x353736, 0x535351, 0x595855, 0x574b43, 0x977b64, 0xd9cec3, 0xffffff, 0xffffff, 0xb5b5b5, 0xffffff, 0xfcf0f1, 0xf29e7c, 0xf3a66b, 0xf7cb74, 0xfbe783, 0xfce687, 0xf7c77f, 0xf1957d, 0xf19583, 0xf09381, 0xf08b76, 0xea8164, 0xb5644d, 0x7c4637, 0x6e483c, 0x5e4a40, 0x4f423d, 0x4a342c, 0x6a5c54, 0x575959, 0x141516, 0x202223, 0x40413f, 0x66625c, 0x77726e, 0x6b655e, 0x745d4c, 0xddd1c5, 0xffffff, 0xffffff, 0xececec, 0xffffff, 0xfcefef, 0xf29f82, 0xf19865, 0xf3b06b, 0xf7c77f, 0xfceb97, 0xf9d892, 0xf3ab86, 0xf19e87, 0xf19982, 0xf18d76, 0xe17c5f, 0xa75b44, 0x7a453a, 0x5f382f, 0x4a342e, 0x5c4c48, 0x594c46, 0x54453b, 0x53504b, 0x2c2f30, 0x4e4e4d, 0x403c38, 0x645f5a, 0x716c66, 0x756f67, 0x726256, 0xcabeb4, 0xffffff, 0xfefdfd, 0xffffff, 0xffffff, 0xfcf2f1, 0xf2a28f, 0xf08b65, 0xf1986a, 0xf3a983, 0xf9db91, 0xfadd98, 0xf7c88e, 0xf3ad84, 0xf19b7c, 0xf39972, 0xd67e59, 0x965241, 0x714138, 0x573a31, 0x58433c, 0x54413a, 0x5a4c45, 0x514841, 0x474440, 0x3d3e3d, 0x4a4642, 0x33302d, 0x635e59, 0x5e5954, 0x7a756d, 0x8a7c6f, 0xc3b5a8, 0xffffff, 0xfefefd, 0xffffff, 0xffffff, 0xfef8f7, 0xf4b2a5, 0xf0866c, 0xef7f65, 0xf08e7a, 0xf4b683, 0xf8ce8c, 0xf9d391, 0xf6cc8b, 0xf4b57d, 0xf4ac6f, 0xd68250, 0x9b5b44, 0x6f473b, 0x52352c, 0x4d342c, 0x563d34, 0x67524a, 0x706057, 0x504c47, 0x414240, 0x35322f, 0x3c3835, 0x5c5853, 0x6b6966, 0x78746c, 0x928577, 0xddd8d2, 0xffffff, 0xfefefd, 0xffffff, 0xffffff, 0xffffff, 0xf7c7bd, 0xf0917f, 0xef7e6e, 0xef7e70, 0xf29d78, 0xf6c085, 0xf7c686, 0xf7d089, 0xf5be7b, 0xf1a167, 0xcd7848, 0xa26142, 0x815241, 0x57352a, 0x553a2e, 0x50382d, 0x5b4436, 0x66564b, 0x45413e, 0x414140, 0x2e2a27, 0x504c48, 0x55504a, 0x6e6b65, 0x756d63, 0x9d9487, 0xfafaf8, 0xffffff, 0xfffffe, 0xffffff, 0xe9e8e8, 0xffffff, 0xf8dcd7, 0xf19c8c, 0xef8777, 0xee776a, 0xf19472, 0xf3a878, 0xf2a878, 0xf4b97a, 0xf4b776, 0xf09e62, 0xc87746, 0x9d5e3f, 0x7e4f3e, 0x65483b, 0x584234, 0x5e4c42, 0x56473f, 0x5b524c, 0x464644, 0x2a2928, 0x32302d, 0x524c47, 0x544d47, 0x78766f, 0x796d60, 0xd1ccc6, 0xffffff, 0xfdfdfd, 0xffffff, 0xffffff, 0xb1b0b0, 0xffffff, 0xfaf3f1, 0xf3aea1, 0xf08b7b, 0xef786b, 0xef846e, 0xef866c, 0xf08d6c, 0xf1996b, 0xf3ad72, 0xf2a166, 0xd07d4a, 0x9e6041, 0x775241, 0x684e3e, 0x5d4434, 0x5b463a, 0x584c44, 0x60554e, 0x54514e, 0x2e2d2a, 0x393531, 0x56504a, 0x58554f, 0x766f65, 0x9d978c, 0xf8fcfb, 0xfeffff, 0xffffff, 0xffffff, 0xffffff, 0x747474, 0xffffff, 0xfcffff, 0xf7cfc9, 0xf09080, 0xef7d70, 0xee7768, 0xee7565, 0xee7e66, 0xef8768, 0xf1966b, 0xf3a36a, 0xde8450, 0xaf6c4b, 0x7b5240, 0x705342, 0x664835, 0x563e30, 0x56463a, 0x4e4038, 0x625952, 0x58524b, 0x37322f, 0x59534d, 0x625d55, 0x7b756a, 0xd3d9d6, 0xf6ffff, 0xf7fdfd, 0xfefffe, 0xffffff, 0xffffff, 0x323232, 0xffffff, 0xffffff, 0xfdf6f5, 0xf3a99c, 0xef8a79, 0xee7467, 0xed675c, 0xee7261, 0xef8769, 0xef8767, 0xf29668, 0xe78e5b, 0xb06c4a, 0x815946, 0x6f4f3e, 0x6b513f, 0x5a493f, 0x483b35, 0x4b3f38, 0x605953, 0x504945, 0x383431, 0x635951, 0x746a5e, 0x999992, 0xecf8f9, 0xedf8f9, 0xf5fefe, 0xfcffff, 0xffffff, 0xffffff, 0xb0b0b, 0xd9d9d9, 0xffffff, 0xfeffff, 0xf9dcd7, 0xf09384, 0xee7e72, 0xec6b5f, 0xed6b5d, 0xee7863, 0xef8066, 0xef8d66, 0xf29c63, 0xd28857, 0x98674c, 0x7b5844, 0x6d503f, 0x5b4438, 0x533f32, 0x57483e, 0x5a4f49, 0x5a514a, 0x463d38, 0x716256, 0x82786c, 0xb9bdba, 0xf0fdff, 0xecf6f7, 0xf4fdfd, 0xfbffff, 0xffffff, 0xffffff, 0x0, 0xa4a4a4, 0xffffff, 0xfbfbfb, 0xffffff, 0xf6c3bb, 0xef8679, 0xec6f66, 0xec695d, 0xee7261, 0xee7662, 0xef8664, 0xf39a67, 0xec9661, 0xa96a4e, 0x855e49, 0x7f5b46, 0x745541, 0x685242, 0x5b4f45, 0x544a43, 0x5c4e44, 0x51463e, 0x766758, 0x92897e, 0xd7e2e2, 0xeaf6f8, 0xeef8f9, 0xf5fefd, 0xfcffff, 0xffffff, 0xffffff, 0x0, 0x606060, 0xffffff, 0xfcfcfc, 0xffffff, 0xfdfbfb, 0xf1aca5, 0xed7269, 0xed6d62, 0xed7161, 0xee7261, 0xf08365, 0xf1976a, 0xf19667, 0xc07d5b, 0x976951, 0x8c644e, 0x7f604a, 0x6c5846, 0x5a4f47, 0x635347, 0x665a51, 0x5b544b, 0x6d5d4e, 0xb4b4ad, 0xe5f3f5, 0xe8f3f4, 0xf1fafa, 0xf8fefe, 0xfeffff, 0xffffff, 0xffffff, 0x0, 0x292929, 0xfafafa, 0xffffff, 0xfefefd, 0xfeffff, 0xf9f3f3, 0xe7948f, 0xe8665f, 0xee7265, 0xee7160, 0xef7e64, 0xf0916a, 0xf59b6c, 0xd68862, 0x9e6e55, 0x87644f, 0x79604e, 0x6f6053, 0x685b52, 0x716457, 0x5f5952, 0x363431, 0x635b52, 0xd2dbdb, 0xe5f1f3, 0xedf7f7, 0xf6fefc, 0xfdffff, 0xffffff, 0xffffff, 0xffffff, 0x0, 0x10101, 0xcccccc, 0xffffff, 0xf8fbfa, 0xf9f9f9, 0xfafdfd, 0xf5f0f0, 0xe49491, 0xe4635b, 0xee7062, 0xee7a65, 0xef8d69, 0xf4a46d, 0xe79367, 0xa77358, 0x816450, 0x746357, 0x76695f, 0x7d7165, 0x726b62, 0x4f4b47, 0x39352f, 0xa2a7a4, 0xe2eef0, 0xe9f3f3, 0xf6fdfd, 0xfdffff, 0xfefefe, 0xfdfdfd, 0xfbfbfb, 0xfcfcfc, 0x30303, 0x0, 0x949393, 0xffffff, 0xf6f7f7, 0xf9f9f9, 0xf9f7f8, 0xfafbfc, 0xf6f5f6, 0xe5a6a6, 0xe36b65, 0xee695b, 0xee7561, 0xf3956c, 0xe49768, 0x9f6e55, 0x7d6353, 0x77665a, 0x7d6c5f, 0x6e6258, 0x595048, 0x3e342c, 0x7b7871, 0xd7e5e6, 0xe8f3f3, 0xf5fcfc, 0xfbfcfc, 0xfcfcfc, 0xfefefe, 0xffffff, 0xffffff, 0xffffff, 0x30303, 0x0, 0x4e4e4e, 0xffffff, 0xf7f7f7, 0xf9f8fa, 0xf9f8f9, 0xf8f6f7, 0xf8f7fa, 0xf5f7fc, 0xeacacc, 0xe7908a, 0xe96e61, 0xee755d, 0xd17557, 0x936149, 0x735b4c, 0x6a594c, 0x5e5146, 0x4d4239, 0x4e453c, 0x75736e, 0xc9d3d3, 0xedf7f8, 0xf9fdfd, 0xffffff, 0xfeffff, 0xffffff, 0xf8f8f8, 0xd3d3d3, 0x989898, 0x535353, 0x20202, 0x0, 0x1e1e1e, 0xececec, 0xffffff, 0xf8f7f9, 0xf8f8fa, 0xf8f7fa, 0xf7f4f7, 0xf6f0f5, 0xf4f1f5, 0xede7eb, 0xe7caca, 0xe2aba8, 0xd29a91, 0xa5857a, 0x7a716b, 0x75736e, 0x72726e, 0x7e817f, 0xaeb9b9, 0xedf6f6, 0xffffff, 0xfefefe, 0xffffff, 0xdfdfdf, 0xa9a9a9, 0x666666, 0x2c2c2c, 0x50505, 0x0, 0x0, 0x0, 0x20202, 0x0, 0xc0c0c0, 0xffffff, 0xf8f9f9, 0xf8f9fa, 0xf8f7f9, 0xf6f4f7, 0xf6f1f5, 0xf4ecef, 0xf2e8eb, 0xf0eaec, 0xede8eb, 0xe6e3e6, 0xdddfe3, 0xd4dcde, 0xd3dfe2, 0xeaf5f7, 0xffffff, 0xffffff, 0xececec, 0xb9b8b8, 0x7a7a7a, 0x393939, 0xe0e0e, 0x0, 0x0, 0x0, 0x0, 0x30303, 0x30303, 0x0, 0x30303, 0x0, 0x7e7e7e, 0xffffff, 0xfcfcfc, 0xfefefe, 0xfbfbfc, 0xf9f7f9, 0xf8f4f5, 0xf7f0f1, 0xf6eeef, 0xf5eced, 0xf6eded, 0xf4f1f1, 0xf3f5f7, 0xf4fafb, 0xfeffff, 0xd2d4d4, 0x898988, 0x484747, 0x151414, 0x0, 0x0, 0x0, 0x0, 0x30303, 0x30303, 0x20202, 0x10101, 0x0, 0x0
};

//Fresh Orange
int get_feature_data0(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features0 + offset, length * sizeof(float));
    return 0;
}
//Stale Orange
int get_feature_data1(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features1 + offset, length * sizeof(float));
    return 0;
}
//Fresh Apples
int get_feature_data2(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features2 + offset, length * sizeof(float));
    return 0;
}

//Stale Apples
int get_feature_data3(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features3 + offset, length * sizeof(float));
    return 0;
}

/*int get_feature_data0(size_t offset, size_t length, float *out_ptr) {
    memcpy(out_ptr, features0 + offset, length * sizeof(float));
    return 0;
}*/

#include <stdarg.h>

void vprint(const char *fmt, va_list argp)
{
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void ei_printf(const char *format, ...) {
    va_list myargs;
    va_start(myargs, format);
    vprint(format, myargs);
    va_end(myargs);
}

int main(void)
{
	  HAL_Init();

	  /* Configure the system clock */
	  SystemClock_Config();

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
	  MX_USART2_UART_Init();
	  MX_CRC_Init();

	while (1)
	{
	    /* USER CODE END WHILE */
		  //Fresh Oranges
		  signal_t signal0;
		  signal0.total_length = sizeof(features0) / sizeof(features0[0]);
		  signal0.get_data = &get_feature_data0;
		  ei_impulse_result_t result0 = { 0 };
				EI_IMPULSE_ERROR res0 = run_classifier(&signal0, &result0, false);
				ei_printf("run_classifier returned: %d\n", res0);
				ei_printf("Predictions (Classification: %d ms.):",
					result0.timing.classification);

				// print the predictions
				ei_printf("[");
				for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
					ei_printf_float(result0.classification[ix].value);
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
					ei_printf(", ");
			#else
					if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
						ei_printf(", ");
					}
			#endif
				}
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf_float(result0.anomaly);
			#endif
				ei_printf("]\n");

			if(result0.classification[0].value > result0.classification[1].value && result0.classification[0].value > result0.classification[2].value && result0.classification[0].value > result0.classification[3].value && result0.classification[0].value > result0.classification[4].value)
				ei_printf("This is FRESH APPLE!\n");
			else if(result0.classification[1].value > result0.classification[0].value && result0.classification[1].value > result0.classification[2].value && result0.classification[1].value > result0.classification[3].value && result0.classification[1].value > result0.classification[4].value)
				ei_printf("This is STALE ORANGE!\n");
			else if(result0.classification[2].value > result0.classification[0].value && result0.classification[2].value > result0.classification[1].value && result0.classification[2].value > result0.classification[3].value && result0.classification[2].value > result0.classification[4].value)
				ei_printf("This is FRESH APPLE!\n");
			else if(result0.classification[3].value > result0.classification[0].value && result0.classification[3].value > result0.classification[1].value && result0.classification[3].value > result0.classification[2].value && result0.classification[3].value > result0.classification[4].value)
				ei_printf("This is STALE ORANGE!\n");
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);

			if(result0.classification[0].value > result0.classification[1].value && result0.classification[0].value > result0.classification[2].value && result0.classification[0].value > result0.classification[3].value && result0.classification[0].value > result0.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result0.classification[1].value > result0.classification[0].value && result0.classification[1].value > result0.classification[2].value && result0.classification[1].value > result0.classification[3].value && result0.classification[1].value > result0.classification[4].value)
			    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else if(result0.classification[2].value > result0.classification[0].value && result0.classification[2].value > result0.classification[1].value && result0.classification[2].value > result0.classification[3].value && result0.classification[2].value > result0.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result0.classification[3].value > result0.classification[0].value && result0.classification[3].value > result0.classification[1].value && result0.classification[3].value > result0.classification[2].value && result0.classification[3].value > result0.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);


			//Stale Oranges
			signal_t signal1;
		    signal1.total_length = sizeof(features1) / sizeof(features1[0]);
		    signal1.get_data = &get_feature_data1;
			ei_impulse_result_t result1 = { 0 };
				EI_IMPULSE_ERROR res1 = run_classifier(&signal1, &result1, false);
				ei_printf("run_classifier returned: %d\n", res1);
				ei_printf("Predictions (Classification: %d ms.):",
					result1.timing.classification);

				// print the predictions
				ei_printf("[");
				for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
					ei_printf_float(result1.classification[ix].value);
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
					ei_printf(", ");
			#else
					if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
						ei_printf(", ");
					}
			#endif
				}
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf_float(result1.anomaly);
			#endif
				ei_printf("]\n");

			if(result1.classification[0].value > result1.classification[1].value && result1.classification[0].value > result1.classification[2].value && result1.classification[0].value > result1.classification[3].value && result1.classification[0].value > result1.classification[4].value)
				ei_printf("This is FRESH ORANGE!\n");
			else if(result1.classification[1].value > result1.classification[0].value && result1.classification[1].value > result1.classification[2].value && result1.classification[1].value > result1.classification[3].value && result1.classification[1].value > result1.classification[4].value)
				ei_printf("This is STALE ORANGE!\n");
			else if(result1.classification[2].value > result1.classification[0].value && result1.classification[2].value > result1.classification[1].value && result1.classification[2].value > result1.classification[3].value && result1.classification[2].value > result1.classification[4].value)
				ei_printf("This is FRESH APPLE!\n");
			else if(result1.classification[3].value > result1.classification[0].value && result1.classification[3].value > result1.classification[1].value && result1.classification[3].value > result1.classification[2].value && result1.classification[3].value > result1.classification[4].value)
				ei_printf("This is STALE APPLE!\n");
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);

			if(result1.classification[0].value > result1.classification[1].value && result1.classification[0].value > result1.classification[2].value && result1.classification[0].value > result1.classification[3].value && result1.classification[0].value > result1.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result1.classification[1].value > result1.classification[0].value && result1.classification[1].value > result1.classification[2].value && result1.classification[1].value > result1.classification[3].value && result1.classification[1].value > result1.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else if(result1.classification[2].value > result1.classification[0].value && result1.classification[2].value > result1.classification[1].value && result1.classification[2].value > result1.classification[3].value && result1.classification[2].value > result1.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result1.classification[3].value > result1.classification[0].value && result1.classification[3].value > result1.classification[1].value && result1.classification[3].value > result1.classification[2].value && result1.classification[3].value > result1.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);

			//Fresh Apples
			signal_t signal2;
			signal2.total_length = sizeof(features2) / sizeof(features2[0]);
			signal2.get_data = &get_feature_data2;
			ei_impulse_result_t result2 = { 0 };
				EI_IMPULSE_ERROR res2 = run_classifier(&signal2, &result2, false);
				ei_printf("run_classifier returned: %d\n", res2);
				ei_printf("Predictions (Classification: %d ms.):",
					result2.timing.classification);

				// print the predictions
				ei_printf("[");
				for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
					ei_printf_float(result2.classification[ix].value);
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
					ei_printf(", ");
			#else
					if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
						ei_printf(", ");
					}
			#endif
				}
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf_float(result2.anomaly);
			#endif
				ei_printf("]\n");

			if(result2.classification[0].value > result2.classification[1].value && result2.classification[0].value > result2.classification[2].value && result2.classification[0].value > result2.classification[3].value && result2.classification[0].value > result2.classification[4].value)
				ei_printf("This is FRESH ORANGE!\n");
			else if(result2.classification[1].value > result2.classification[0].value && result2.classification[1].value > result2.classification[2].value && result2.classification[1].value > result2.classification[3].value && result2.classification[1].value > result2.classification[4].value)
				ei_printf("This is STALE ORANGE!\n");
			else if(result2.classification[2].value > result2.classification[0].value && result2.classification[2].value > result2.classification[1].value && result2.classification[2].value > result2.classification[3].value && result2.classification[2].value > result2.classification[4].value)
				ei_printf("This is FRESH APPLE!\n");
			else if(result2.classification[3].value > result2.classification[0].value && result2.classification[3].value > result2.classification[1].value && result2.classification[3].value > result2.classification[2].value && result2.classification[3].value > result2.classification[4].value)
				ei_printf("This is STALE APPLE!\n");
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);

			if(result2.classification[0].value > result2.classification[1].value && result2.classification[0].value > result2.classification[2].value && result2.classification[0].value > result2.classification[3].value && result2.classification[0].value > result2.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result2.classification[1].value > result2.classification[0].value && result2.classification[1].value > result2.classification[2].value && result2.classification[1].value > result2.classification[3].value && result2.classification[1].value > result2.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else if(result2.classification[2].value > result2.classification[0].value && result2.classification[2].value > result2.classification[1].value && result2.classification[2].value > result2.classification[3].value && result2.classification[2].value > result2.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result2.classification[3].value > result2.classification[0].value && result2.classification[3].value > result2.classification[1].value && result2.classification[3].value > result2.classification[2].value && result2.classification[3].value > result2.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);

			//Stale Apples
			signal_t signal3;
		    signal3.total_length = sizeof(features3) / sizeof(features3[0]);
		    signal3.get_data = &get_feature_data3;
			ei_impulse_result_t result3 = { 0 };
				EI_IMPULSE_ERROR res3 = run_classifier(&signal3, &result3, false);
				ei_printf("run_classifier returned: %d\n", res3);
				ei_printf("Predictions (Classification: %d ms.):",
					result3.timing.classification);

				// print the predictions
				ei_printf("[");
				for (size_t ix = 1; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
					ei_printf_float(result3.classification[ix].value);
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
					ei_printf(", ");
			#else
					if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
						ei_printf(", ");
					}
			#endif
				}
			#if EI_CLASSIFIER_HAS_ANOMALY == 1
				ei_printf_float(result1.anomaly);
			#endif
				ei_printf("]\n");

			if(result3.classification[0].value > result3.classification[1].value && result3.classification[0].value > result3.classification[2].value && result3.classification[0].value > result3.classification[3].value && result3.classification[0].value > result3.classification[4].value)
				ei_printf("This is FRESH ORANGE!\n");
			else if(result3.classification[1].value > result3.classification[0].value && result3.classification[1].value > result3.classification[2].value && result3.classification[1].value > result3.classification[3].value && result3.classification[1].value > result3.classification[4].value)
				ei_printf("This is STALE ORANGE!\n");
			else if(result3.classification[2].value > result3.classification[0].value && result3.classification[2].value > result3.classification[1].value && result3.classification[2].value > result3.classification[3].value && result3.classification[2].value > result3.classification[4].value)
				ei_printf("This is FRESH APPLE!\n");
			else if(result3.classification[3].value > result3.classification[0].value && result3.classification[3].value > result3.classification[1].value && result3.classification[3].value > result3.classification[2].value && result3.classification[3].value > result3.classification[4].value)
				ei_printf("This is STALE APPLE!\n");
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);

			if(result3.classification[0].value > result3.classification[1].value && result3.classification[0].value > result3.classification[2].value && result3.classification[0].value > result3.classification[3].value && result3.classification[0].value > result3.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result3.classification[1].value > result3.classification[0].value && result3.classification[1].value > result3.classification[2].value && result3.classification[1].value > result3.classification[3].value && result3.classification[1].value > result3.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else if(result3.classification[2].value > result3.classification[0].value && result3.classification[2].value > result3.classification[1].value && result3.classification[2].value > result3.classification[3].value && result3.classification[2].value > result3.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			else if(result3.classification[3].value > result3.classification[0].value && result3.classification[3].value > result3.classification[1].value && result3.classification[3].value > result3.classification[2].value && result3.classification[3].value > result3.classification[4].value)
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
			else
				ei_printf("Unknown Item!\n");
			HAL_Delay(5000);
	    /* USER CODE BEGIN 3 */
	}
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
//  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
